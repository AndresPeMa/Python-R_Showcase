{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "de8c5ef6",
   "metadata": {},
   "source": [
    "# Multiplier-accelerator model; Kernel estimation assignment\n",
    "(5/5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "230a9fb1",
   "metadata": {},
   "source": [
    "Install and import packages needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "28fec223",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Ignoring invalid distribution -ip (d:\\applications\\python\\lib\\site-packages)\n",
      "ERROR: Invalid requirement: '#needed'\n",
      "WARNING: Ignoring invalid distribution -ip (d:\\applications\\python\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (d:\\applications\\python\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (d:\\applications\\python\\lib\\site-packages)\n"
     ]
    }
   ],
   "source": [
    "!pip install quantecon\n",
    "\n",
    "#Imports for first question\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from quantecon import LinearStateSpace\n",
    "import cmath\n",
    "import math\n",
    "import sympy\n",
    "from sympy import Symbol, init_printing\n",
    "from cmath import sqrt\n",
    "\n",
    "\n",
    "#Imports needed for question 3\n",
    "from scipy.stats import norm\n",
    "import scipy.stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89a2ce26",
   "metadata": {},
   "source": [
    "## First Question"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f67427e",
   "metadata": {},
   "source": [
    "Construct a version of the Samuelson model that has neither damped nor explosive roots that has period 16.  I am thinking of quarters as the unit of time, and 16 quarters is a Presidential cycle. The three initial conditions are $Y_0=Y_1=Y_2 = 656.8535592272043$. There is no government spending.  (Hint: use the fact that $I_2 = 0$ implies that $Y_2 = C_2$. This will help you solve for gamma.)  Give the consumption function, the investment function, and the GDP identity.  Plot the deterministic version of the model for 100 periods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a0f3060",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = (11, 5)  #set default figure size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0561c5f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def categorize_solution(ρ1, ρ2):\n",
    "\n",
    "    \"\"\"This function takes values of ρ1 and ρ2 and uses them\n",
    "    to classify the type of solution\n",
    "    \"\"\"\n",
    "\n",
    "    discriminant = ρ1 ** 2 + 4 * ρ2\n",
    "    if ρ2 > 1 + ρ1 or ρ2 < -1:\n",
    "        print('Explosive oscillations')\n",
    "    elif ρ1 + ρ2 > 1:\n",
    "        print('Explosive growth')\n",
    "    elif discriminant < 0:\n",
    "        print('Roots are complex with modulus less than one; \\\n",
    "therefore damped oscillations')\n",
    "    else:\n",
    "        print('Roots are real and absolute values are less than one; \\\n",
    "therefore get smooth convergence to a steady state')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4aed4d29",
   "metadata": {},
   "outputs": [],
   "source": [
    "##=== This method uses numpy to calculate roots ===#\n",
    "\n",
    "\n",
    "def y_nonstochastic(y_0=100, y_1=80, α=.9, β=.8, γ=10, n=80):\n",
    "\n",
    "    \"\"\" Rather than computing the roots of the characteristic\n",
    "    polynomial by hand as we did earlier, this function\n",
    "    enlists numpy to do the work for us\n",
    "    \"\"\"\n",
    "\n",
    "    # Useful constants\n",
    "    ρ1 = α + β\n",
    "    ρ2 = -β\n",
    "\n",
    "    categorize_solution(ρ1, ρ2)\n",
    "\n",
    "    # Find roots of polynomial\n",
    "    roots = np.roots([1, -ρ1, -ρ2])\n",
    "    print(f'Roots are {roots}')\n",
    "\n",
    "    # Check if real or complex\n",
    "    if all(isinstance(root, complex) for root in roots):\n",
    "        print('Roots are complex')\n",
    "    else:\n",
    "        print('Roots are real')\n",
    "\n",
    "    # Check if roots are less than one\n",
    "    if all(abs(root) < 1 for root in roots):\n",
    "        print('Roots are less than one')\n",
    "    else:\n",
    "        print('Roots are not less than one')\n",
    "\n",
    "    # Define transition equation\n",
    "    def transition(x, t): return ρ1 * x[t - 1] + ρ2 * x[t - 2] + γ\n",
    "\n",
    "    # Set initial conditions\n",
    "    y_t = [y_0, y_1]\n",
    "\n",
    "    # Generate y_t series\n",
    "    for t in range(2, n):\n",
    "        y_t.append(transition(y_t, t))\n",
    "\n",
    "    return y_t\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9aad33ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_y(function=None):\n",
    "\n",
    "    \"\"\"Function plots path of Y_t\"\"\"\n",
    "\n",
    "    plt.subplots(figsize=(10, 6))\n",
    "    plt.plot(function)\n",
    "    plt.xlabel('Time $t$', fontsize=20)\n",
    "    plt.ylabel('$Y_t$', fontsize=20, rotation=0)\n",
    "    #plt.grid()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "df72f5bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a, b = (0.8477590650225735+0j), (1-0j)\n",
      "ρ1, ρ2 = (1.8477590650225735+0j), (-1+0j)\n"
     ]
    }
   ],
   "source": [
    "### code to reverse-engineer a cycle\n",
    "### y_t = r^t (c_1 cos(ϕ t) + c2 sin(ϕ t))\n",
    "###\n",
    "\n",
    "def f(r, ϕ):\n",
    "    \"\"\"\n",
    "    Takes modulus r and angle ϕ of complex number r exp(j ϕ)\n",
    "    and creates ρ1 and ρ2 of characteristic polynomial for which\n",
    "    r exp(j ϕ) and r exp(- j ϕ) are complex roots.\n",
    "\n",
    "    Returns the multiplier coefficient a and the accelerator coefficient b\n",
    "    that verifies those roots.\n",
    "    \"\"\"\n",
    "    g1 = cmath.rect(r, ϕ)  # Generate two complex roots\n",
    "    g2 = cmath.rect(r, -ϕ)\n",
    "    ρ1 = g1 + g2           # Implied ρ1, ρ2\n",
    "    ρ2 = -g1 * g2\n",
    "    b = -ρ2                # Reverse-engineer a and b that validate these\n",
    "    a = ρ1 - b\n",
    "    return ρ1, ρ2, a, b\n",
    "\n",
    "## Now let's use the function in an example\n",
    "## Here are the example parameters\n",
    "\n",
    "r = 1\n",
    "period = 16                # Length of cycle in units of time\n",
    "ϕ = 2 * math.pi/period\n",
    "\n",
    "## Apply the function\n",
    "\n",
    "ρ1, ρ2, a, b = f(r, ϕ)\n",
    "\n",
    "print(f\"a, b = {a}, {b}\")\n",
    "print(f\"ρ1, ρ2 = {ρ1}, {ρ2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9d062325",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a, b = 0.8477590650225735, 1.0\n",
      "Roots are complex with modulus less than one; therefore damped oscillations\n",
      "Roots are [0.92387953+0.38268343j 0.92387953-0.38268343j]\n",
      "Roots are complex\n",
      "Roots are not less than one\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "r = 1   # Generates undamped, nonexplosive cycles\n",
    "\n",
    "period = 16   # Length of cycle in units of time\n",
    "ϕ = 2 * math.pi/period\n",
    "\n",
    "## Apply the reverse-engineering function f\n",
    "\n",
    "ρ1, ρ2, a, b = f(r, ϕ)\n",
    "\n",
    "# Drop the imaginary part so that it is a valid input into y_nonstochastic\n",
    "a = a.real\n",
    "b = b.real\n",
    "\n",
    "print(f\"a, b = {a}, {b}\")\n",
    "\n",
    "ytemp = y_nonstochastic(α = a, β = b, y_0 = 656.8535592272043, y_1 = 656.8535592272043, γ = 100, n = 100)\n",
    "plot_y(ytemp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bee4d26c",
   "metadata": {},
   "source": [
    "## Second Question"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56fb7448",
   "metadata": {},
   "source": [
    "Now simulate a Presidential election using a stochastic version of the model with the same parameters.  The candidate is elected in period 16, and she implements a one-off government spending of 10.  Keep the variance of the shock for the method   y_stochastic_g(...) at $\\sigma = 2$, but use this random seed np.random.seed(1234), so that I can grade your homework.  Plot the stochastic version of the model for 100 periods.  Do you think government spending induces the business cycle?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "77c6113c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Roots are complex with modulus less than one; therefore damped oscillations\n",
      "[0.92387953+0.38268343j 0.92387953-0.38268343j]\n",
      "Roots are complex\n",
      "Roots are not less than one\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def y_stochastic_g(y_0=20,\n",
    "                   y_1=20,\n",
    "                   α=0.8477590650225735,\n",
    "                   β=1,\n",
    "                   γ=10,\n",
    "                   n=100,\n",
    "                   σ=2,\n",
    "                   g=0,\n",
    "                   g_t=0,\n",
    "                   duration='permanent'):\n",
    "\n",
    "    \"\"\"This program computes a response to a permanent increase\n",
    "    in government expenditures that occurs at time 20\n",
    "    \"\"\"\n",
    "\n",
    "    # Useful constants\n",
    "    ρ1 = α + β\n",
    "    ρ2 = -β\n",
    "\n",
    "    # Categorize solution\n",
    "    categorize_solution(ρ1, ρ2)\n",
    "\n",
    "    # Find roots of polynomial\n",
    "    roots = np.roots([1, -ρ1, -ρ2])\n",
    "    print(roots)\n",
    "\n",
    "    # Check if real or complex\n",
    "    if all(isinstance(root, complex) for root in roots):\n",
    "        print('Roots are complex')\n",
    "    else:\n",
    "        print('Roots are real')\n",
    "\n",
    "    # Check if roots are less than one\n",
    "    if all(abs(root) < 1 for root in roots):\n",
    "        print('Roots are less than one')\n",
    "    else:\n",
    "        print('Roots are not less than one')\n",
    "\n",
    "    # Generate shocks\n",
    "    ϵ = np.random.normal(0, 1, n)\n",
    "\n",
    "    def transition(x, t, g):\n",
    "\n",
    "        # Non-stochastic - separated to avoid generating random series\n",
    "        # when not needed\n",
    "        if σ == 0:\n",
    "            return ρ1 * x[t - 1] + ρ2 * x[t - 2] + γ + g\n",
    "\n",
    "        # Stochastic\n",
    "        else:\n",
    "            ϵ = np.random.normal(0, 1, n)\n",
    "            return ρ1 * x[t - 1] + ρ2 * x[t - 2] + γ + g + σ * ϵ[t]\n",
    "\n",
    "    # Create list and set initial conditions\n",
    "    y_t = [y_0, y_1]\n",
    "\n",
    "    # Generate y_t series\n",
    "    for t in range(2, n):\n",
    "\n",
    "        # No government spending\n",
    "        if g == 0:\n",
    "            y_t.append(transition(y_t, t))\n",
    "\n",
    "        # Government spending (no shock)\n",
    "        elif g != 0 and duration == None:\n",
    "            y_t.append(transition(y_t, t))\n",
    "\n",
    "        # Permanent government spending shock\n",
    "        elif duration == 'permanent':\n",
    "            if t < g_t:\n",
    "                y_t.append(transition(y_t, t, g=0))\n",
    "            else:\n",
    "                y_t.append(transition(y_t, t, g=g))\n",
    "\n",
    "        # One-off government spending shock\n",
    "        elif duration == 'one-off':\n",
    "            if t == g_t:\n",
    "                y_t.append(transition(y_t, t, g=g))\n",
    "            else:\n",
    "                y_t.append(transition(y_t, t, g=0))\n",
    "    return y_t\n",
    "np.random.seed(1234)\n",
    "plot_y(y_stochastic_g(y_0 = 656.8535592272043, y_1 = 656.8535592272043, γ = 100, g = 10, g_t = 16, duration = \"one-off\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e8f6464",
   "metadata": {},
   "source": [
    ">Yes, I think government spending induces business cycle. The government can use tools such as fiscal and/or monetary policies to induce the business cycle. The government also has the power to do certain things such as increasing or decreasing the interest rates that have a massive impact on business. Doing a little bit of research this question seems to be very popular in the business world with varying answers. Economists Ramey and Zubairy, claim there is no consensus on whether increasing government spending is an effective policy measure to lift the economy up during recessions. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d05e99ce",
   "metadata": {},
   "source": [
    "## Third Question"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35906acb",
   "metadata": {},
   "source": [
    "Last year, there were 35 students in Econ 512.  They graciously assented to writing down their weights in pounds.  Below  is the resulting array of data. Use kernel estimation to estimate the distribution from which the students weights were drawn. Plot the estimated distribution using the grid from 90 to 230 with an interval being one pound.  In your plot, also include the default histogram.  Give your best guess of how many women and how many men were in the class last year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f2bb1912",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 792x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "jdata = [182,\n",
    " 127,\n",
    " 117,\n",
    " 187,\n",
    " 110,\n",
    " 176,\n",
    " 189,\n",
    " 174,\n",
    " 112,\n",
    " 112,\n",
    " 115,\n",
    " 171,\n",
    " 119,\n",
    " 179,\n",
    " 172,\n",
    " 189,\n",
    " 195,\n",
    " 125,\n",
    " 116,\n",
    " 182,\n",
    " 181,\n",
    " 186,\n",
    " 196,\n",
    " 110,\n",
    " 111,\n",
    " 129,\n",
    " 193,\n",
    " 122,\n",
    " 189,\n",
    " 118,\n",
    " 171,\n",
    " 110,\n",
    " 186,\n",
    " 194,\n",
    " 183]\n",
    "\n",
    "jdata = np.array(jdata)\n",
    "plt.hist(jdata)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ccbfd89c",
   "metadata": {},
   "outputs": [],
   "source": [
    "K = norm.pdf\n",
    "\n",
    "class KDE:\n",
    "\n",
    "    def __init__(self, x_data, h=None):\n",
    "\n",
    "        if h is None:\n",
    "            c = x_data.std()\n",
    "            n = len(x_data)\n",
    "            h = 1.06 * c * n**(-1/5)\n",
    "        self.h = h\n",
    "        self.x_data = x_data\n",
    "\n",
    "    def f(self, x):\n",
    "        if np.isscalar(x):\n",
    "            return K((x - self.x_data) / self.h).mean() * (1/self.h)\n",
    "        else:\n",
    "            y = np.empty_like(x)\n",
    "            for i, x_val in enumerate(x):\n",
    "                y[i] = K((x_val - self.x_data) / self.h).mean() * (1/self.h)\n",
    "            return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "44dce278",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_kde(ϕ, x_min=-90, x_max=230):\n",
    "    #x_data = ϕ.rvs(n)\n",
    "    kde = KDE(jdata) #KernelDensity(kernel = \"tophat\").fit(x_data)\n",
    "\n",
    "    x_grid = np.linspace(x_min, x_max, 141)\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(x_grid, kde.f(x_grid), label=\"Estimate\")\n",
    "    ax.hist(jdata, density = True, label=\"Histogram of Weight Density\", bins = 20)\n",
    "    ax.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "df6ba26b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_kde(jdata, x_min = 90, x_max = 230)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19adc1d2",
   "metadata": {},
   "source": [
    ">Looking at the graph above I would say that about 1/3rd of the cohort were women. Just by looking at the weights you could come to the conclusion that anyone who weighs less than 130lbs is a woman, but this kernel estimation makes it easier to tell since it clearly divides the cohort into two (I am interpreting it as women and men). I am able to come to this conclusion by understanding the kernel estimation is used to see the probability distribution of the cohort.  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
